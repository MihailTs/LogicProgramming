% Списък от квадрати наричаме списък от вида 
% [[x0, y0, a0], [x1, y1, a1], ..., [xn, yn, an]], 
% където всеки списък [xi, yi, ai], 0 ≤ i ≤ n, 
% представя квадрат със страни успоредни на координатните оси, 
% център с координати (xi, yi) и дължина на страната ai. 
% Казваме, че списъкът е концентричен, 
% ако всеки негов елемент представя квадрат, 
% който се съдържа строго в квадрата, 
% представен със следващия елемент на списъка.

% a) Да се дефинира на Пролог двуместен предикат p(X, Y), 
% който по даден списък от квадрати X генерира в Y
% при презадоволяване всички концентрични списъци, 
% чиито елементи са елементи на X.

% б) Да се дефинира на Пролог двуместен предикат m(X, Y), 
% който по даден списък от квадрати X генерира в Y 
% при презадоволяване всички концентрични списъци 
% с максимална дължина, чиито елементи са елементи на X.


subset([], []).
subset([X|L], [X|R]) :- subset(L, R).
subset([_|L], R) :- subset(L, R).

insert(X, L, [X|L]).
insert(X, [Y|L], [Y|R]) :- insert(X, L, R).

permutation([], []).
permutation([X|L], P) :- permutation(L, P1), insert(X, P1, P).

is_conc([]).
is_conc([_]).
is_conc([[X1, Y1, A1], [X2, Y2, A2]|L]) :- 
    Nb1 is Y1 + A1, Sb1 is Y1 - A1,
    Wb1 is X1 - A1, Eb1 is X1 + A1,
    Nb2 is Y2 + A2, Sb2 is Y2 - A2,
    Wb2 is X2 - A2, Eb2 is X2 + A2,
    Wb1 > Wb2, Eb1 < Eb2, Nb1 < Nb2, Sb1 > Sb2,
    is_conc(L).

p(X, P) :- subset(X, Y), permutation(Y, P), is_conc(P).

% б)

is_shorter([], [_]).
is_shorter([_|L], [_|R]) :- is_shorter(L, R).

m(X, P) :- subset(X, Y), permutation(Y, P), is_conc(P),
    	   not((subset(X, Y1), permutation(Y1, P1), is_conc(P1),
               is_shorter(P, P1))).


% Да се дефинира на Пролог едноместен предикат p(a, b, c),
% който при преудовлетворяване генерира всички тройки от
% естествени числа (a,b,c), чието произведение при деление
% на 3 дава остатък 1 и уравнението ax^2 + bx + c = 0 има два
% различни реални корена.

nat(0).
nat(N) :- nat(N1), N is N1 + 1.

between(A, B, A) :- B >= A.
between(A, B, X) :- B > A, A1 is A + 1, between(A1, B, X).

tripple(X, Y, Z) :- nat(K1), between(0, K1, X),
    				K2 is K1 - X, between(0, K2, Y),
    				Z is K2 - Y.

p(A, B, C) :- tripple(A, B, C), M is A * B * C,
    		  1 is M mod 3, D is ((B * B) - (4 * C * A)), D > 0.

