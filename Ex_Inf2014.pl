% Да се дефинира на Пролог предикат p(A), 
% който при преудовлетворяване генерира в A всички крайни 
% строго монотонно растящи аритметични прогресии от естествени числа.

nat(0).
nat(N) :- nat(N1), N is N1 + 1.

between(A, B, A) :- B >= A.
between(A, B, X) :- B > A, A1 is A + 1, between(A1, B, X).

nat_tripple(X, Y, Z) :- nat(K1), between(0, K1, X),
    					K2 is K1 - X, between(0, K2, Y),
    					Z is K2 - Y.

% генерира първи член, разлика на прогресията и дължина на редицата
p(A) :- nat_tripple(X, Y, Z), Y > 0, p_helper(X, Y, Z, A).

% генерира редицата в последния си аргумент
% първия аргумент е текущият член на редицата
p_helper(X, _, 1, [X]).
p_helper(X, Y, N, [X|A]) :- N > 0, Xnext is X + Y, N1 is N - 1, 
    						p_helper(Xnext, Y, N1, A).


% Ще казваме, че списъкът C = [c1, c2, ..., cn] сливане на списъците A и B,
% ако съществуват такива редици i1 < i2 < ... < ik и 
% 1 = j1 < j2 < ... < jm, че n = k + m, 
% {1, 2, ..., n} = {i1, i2, ..., ik} ∪ {j1, j2, ..., jm}, 
% A = [c_i1, c_i2, ..., c_ik] и B = [c_j1, c_j2, ..., c_jm]. 
% Да се дефинира на Пролог предикат q(A, B, C), 
% който по дадени списъци A и B при преудовлетворяване генерира в C 
% всевъзможните сливания на A и B.

q([], [], []).
q([X|A], B, [X|C]) :- q(A,B,C).
q(A, [X|B], [X|C]) :- q(A,B,C).

